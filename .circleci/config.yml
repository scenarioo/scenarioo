version: 2
jobs:
  build:
    docker:
      # See https://circleci.com/docs/2.0/circleci-images/ ...
      # circleci/openjdk:8-jdk-browsers
      - image: circleci/openjdk@sha256:fa630780e340d81ad974a06c9104e7c337b906186c42586ee61ec571eec730d3
      - image: docker.elastic.co/elasticsearch/elasticsearch:5.6.9
        environment:
          cluster.name: elasticsearch
          xpack.ml.enabled: false
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms512m -Xmx512m
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Configure Environment for Job
          command: echo -e "export BRANCH=`echo $CIRCLE_BRANCH | sed 's/\//\-/' | sed 's/\#/\-/'`" >> $BASH_ENV
      - run:
          name: Clean & install
          command: |
            mkdir -p test-results
            ./gradlew clean build -x test --no-daemon -s
      - run:
          name: Unit tests
          command: ./gradlew test -x scenarioo-client:npm_test --continue --no-daemon -s
      - run:
          name: JS tests
          command: ./gradlew scenarioo-client:npm_test --no-daemon -s
          when: always
      - run:
          name: JS/TS lint
          command: ./gradlew scenarioo-client:runLinter --no-daemon -s
          when: always
      - run:
          name: TS lint App
          command: ./gradlew scenarioo-client:runTsLint --no-daemon -s
          when: always
      - run:
          name: Archive generated example scenarioo docu data of Wikipedia
          command: |
            pushd scenarioo-docu-generation-example/build/scenarioDocuExample
            zip -r ../../../exampleScenariooDocu.zip ./*
            popd
      - run:
          name: E2E tests
          command: |
            export SCENARIOO_DATA=./scenarioo-docu-generation-example/build/scenarioDocuExample
            export SPRING_SECURITY_USER_PASSWORD=justfortest
            echo "Starting Scenarioo"
            java -Xms800m -Xmx800m -jar scenarioo-server/build/libs/scenarioo-latest.war > test-results/scenarioo-server.log || echo "Scenarioo server died. Exit code: $? see https://circleci.com/blog/how-to-handle-java-oom-errors/" >> test-results/scenarioo-server.log &

            echo "Wait for Scenarioo to finish starting, importing the builds and processing the comparisons. Abort if an error occurs."
            ( tail -f -n0 test-results/scenarioo-server.log & ) | while read LINE0
              do
                if [[ "$LINE0" = *"All Builds Imported and Comparisons Calculated."* ]]; then
                  exit 0
                elif  [[ "$LINE0" = *"ERROR"* ]]; then
                  echo $LINE0
                  exit 1
                fi
              done

            export PROTRACTOR_BASE_URL=http://localhost:8080/scenarioo
            export SCENARIOO_TARGET_DIRECTORY="../e2eScenariooDocu"
            export BUILD_NUMBER="$CIRCLE_BUILD_NUM"

            echo "Running e2e tests and generating scenarioo self-docu e2e test reports for branch / build name: scenarioo-${BRANCH}/build-${CIRCLE_BUILD_NUM}"
            export GRADLE_OPTS="-Xms300m -Xmx1000m"
            ./gradlew scenarioo-client:runE2eCircleCi --no-daemon -s

            echo "Test the self docu e2e test reports are uploadable to current scenarioo product version under test - to ensure the changes will not break uploading of self docu."
            pushd e2eScenariooDocu
            zip -r ../e2eScenariooDocu.zip ./*
            popd
            curl -f --user scenarioo:justfortest -F"file=@e2eScenariooDocu.zip" http://localhost:8080/scenarioo/rest/builds
          no_output_timeout: 2m # abort build if no output is produced for 2 minutes

      - run:
          name: Collect test results
          command: |
            mkdir -p test-results/javascript
            cp -pR scenarioo-client/TESTS* test-results/javascript || true
            cp -pR scenarioo-client/test-reports test-results/e2e || true
            cp -pR scenarioo-server/build/test-results/test test-results/server || true
            cp -pR scenarioo-server/build/reports/tests/test test-results/server/report || true
            cp -pR scenarioo-validator/build/test-results/test test-results/validator || true
            cp -pR scenarioo-docu-generation-example/build/test-results/test test-results/docu || true
          when: always
      - run:
          name: Package Self Docu E2E test reports into ZIP
          command: |
            pushd e2eScenariooDocu
            zip -r ../e2eScenariooDocu.zip ./*
            popd
          when: always
      - run:
          name: Publish Self Docu E2E Test Reports to http://demo.scenarioo.org/scenarioo-develop
          command: |
            mkdir -p dist
            curl -f --user scenarioo:$TOMCAT_USER_PASSWORD -F"file=@e2eScenariooDocu.zip" http://demo.scenarioo.org/scenarioo-develop/rest/builds
            echo -e "scenarioo self-docu e2e test reports:\nhttp://demo.scenarioo.org/scenarioo-develop/#/?branch=scenarioo-${BRANCH}&build=build-${CIRCLE_BUILD_NUM}\n" >> ./dist/build-result-summary.txt
            echo "scenarioo self-docu e2e test reports published to http://demo.scenarioo.org/scenarioo-develop/#/?branch=scenarioo-${BRANCH}&build=build-${CIRCLE_BUILD_NUM}"
          when: always
      - run:
          name: Checksum artifacts and move to dist folder for deploy job
          command: |
            mv e2eScenariooDocu.zip dist
            mv exampleScenariooDocu.zip dist
            mv scenarioo-server/build/libs/scenarioo-latest.war dist/scenarioo.war
            sha256sum dist/e2eScenariooDocu.zip | awk '{ print $1 }' > dist/e2eScenariooDocu.zip.sha256
            sha256sum dist/exampleScenariooDocu.zip | awk '{ print $1 }' > dist/exampleScenariooDocu.zip.sha256
            sha256sum dist/scenarioo.war | awk '{ print $1 }' > dist/scenarioo.war.sha256
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: /test-results
      - store_artifacts:
          path: dist
          destination: /
      # Unfortunately each workflow job has it's own build number. Therefore we need to persist this jobs number
      # here to use it during the deploy for getting the artifacts
      - run:
          name: Persist value of $CIRCLE_BUILD_NUM for deploy job
          command: echo "$CIRCLE_BUILD_NUM" >> BUILD_NUM
      - persist_to_workspace:
          root: .
          paths:
            - BUILD_NUM
      - run:
          name: Build Result Summary
          command: |
            echo -e "Build Result Summary: \n"
            cat ./dist/build-result-summary.txt
          when: always

  deploy:
    docker:
      # See https://circleci.com/docs/2.0/circleci-images/ ...
      - image: circleci/node:8-stretch
    working_directory: ~/infra
    steps:
      # Add keys with write access to scenarioo-infrastructure:
      #  Add private key on Circle CI: https://circleci.com/gh/scenarioo/scenarioo/edit#ssh
      #  And public key on Github: https://github.com/scenarioo/scenarioo-infrastructure/settings/keys
      - add_ssh_keys:
            fingerprints:
              - "d0:c5:44:ab:20:4a:8f:dd:d0:a2:09:b2:c0:f4:e3:fb"
      - run:
          name: Checkout scenarioo-infrastructure
          command: |
            mkdir -p ~/.ssh
            sudo chmod 700 ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git clone -q git@github.com:scenarioo/scenarioo-infrastructure.git .
      - attach_workspace: &attach_workspace
          at: .
      - run:
          name: Deploy demo of branch
          command: |
            ./infra.sh deployDemo "$CIRCLE_BRANCH" "$(cat BUILD_NUM)" "$CIRCLE_USERNAME" "$CIRCLE_PULL_REQUEST" && rm BUILD_NUM
      - run:
          name: Commit and push
          command: |
            git config --global user.email "admin@scenarioo.org"
            git config --global user.name "scenarioo-ci"
            git add demos overviewpage
            git diff
            git commit -m "Deploy demo for $CIRCLE_BRANCH  - Build: $CIRCLE_BUILD_URL triggered by $CIRCLE_USERNAME"
            git push

  publish_docs:
    docker:
      - image: circleci/node:8-stretch
    working_directory: ~/gitbook
    steps:
      # Add keys with write access to scenarioo.github.io:
      #  Add private key on Circle CI: https://circleci.com/gh/scenarioo/scenarioo/edit#ssh
      #  And public key on Github: https://github.com/scenarioo/scenarioo.github.io/settings/keys
      - add_ssh_keys:
            fingerprints:
              - "19:98:49:95:5e:57:6d:01:1d:69:8f:d4:d9:bb:3c:ac"
      - run:
          name: Configure git && github ssh connection for docs deployment
          command: |
            mkdir -p ~/.ssh
            sudo chmod 700 ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git config --global user.email "admin@scenarioo.org"
            git config --global user.name "scenarioo-ci"
      - checkout
      - run:
          name: Install dependencies
          command: cd docs && npm install
      - run:
          name: Generate docu
          command: cd docs && npm run build
      - run:
          name: Publishing Docs to http://www.scenarioo.org/docs
          command: |
            export DOCU_VERSION=`echo $CIRCLE_BRANCH | sed 's/release\///'`
            echo "Publish docs for $DOCU_VERSION"
            cd docs
            npm run gh-pages -- --dist _book --repo git@github.com:scenarioo/scenarioo.github.io.git --branch master --dest docs/$DOCU_VERSION --message "Publish docs for $DOCU_VERSION"

  smoketest:
    docker:
      # See https://circleci.com/docs/2.0/circleci-images/ ...
      # circleci/openjdk:8-jdk-browsers
      - image: circleci/openjdk@sha256:fa630780e340d81ad974a06c9104e7c337b906186c42586ee61ec571eec730d3
    working_directory: ~/smoketest
    steps:
      - checkout
      - run:
          name: Prepare environemnt
          command: |
            ./gradlew scenarioo-client:npmInstall --no-daemon -s
      - run:
          name: Smoketest develop demo
          command: |
            export PROTRACTOR_BASE_URL=http://demo.scenarioo.org/scenarioo-develop

            echo "Running smoketests for develop demo"
            export GRADLE_OPTS="-Xms300m -Xmx1000m"
              ./gradlew scenarioo-client:runSmoketest --no-daemon -s
      - run:
          name: Smoketest master demo
          command: |
            export PROTRACTOR_BASE_URL=http://demo.scenarioo.org/scenarioo-master

            echo "Running smoketests for master demo"
            export GRADLE_OPTS="-Xms300m -Xmx1000m"
              ./gradlew scenarioo-client:runSmoketest --no-daemon -s

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              ignore:
                - /--nodemo/
                - /--no-demo/
      - publish_docs:
          filters:
            branches:
              only:
                - master
                - develop
                - /^release\/.*/
  nightly:
    triggers:
      - schedule:
          cron: "0 3 * * *"
          filters:
            branches:
              only:
                - develop
    jobs:
      - smoketest
